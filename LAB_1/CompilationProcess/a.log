*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'mainARM.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armv4t-unknown-linux-gnueabi"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

declare i32 @printf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"min_enum_size", i32 4}
!2 = !{i32 1, !"branch-target-enforcement", i32 0}
!3 = !{i32 1, !"sign-return-address", i32 0}
!4 = !{i32 1, !"sign-return-address-all", i32 0}
!5 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"PIE Level", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'mainARM.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armv4t-unknown-linux-gnueabi"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

declare i32 @printf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"min_enum_size", i32 4}
!2 = !{i32 1, !"branch-target-enforcement", i32 0}
!3 = !{i32 1, !"sign-return-address", i32 0}
!4 = !{i32 1, !"sign-return-address-all", i32 0}
!5 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"PIE Level", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Simplify the CFG (simplifycfg) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Simplify the CFG (simplifycfg) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before MVE gather/scatter lowering (arm-mve-gather-scatter-lowering) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After MVE gather/scatter lowering (arm-mve-gather-scatter-lowering) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before MVE lane interleaving (mve-laneinterleave) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After MVE lane interleaving (mve-laneinterleave) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

; Loop:
12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

; Exit blocks
26:                                               ; preds = %12
  ret i32 0
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

; Loop:
12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

; Exit blocks
26:                                               ; preds = %12
  ret i32 0
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

; Loop:
12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

; Exit blocks
26:                                               ; preds = %12
  ret i32 0
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

; Loop:
12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

; Exit blocks
26:                                               ; preds = %12
  ret i32 0
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Type Promotion (type-promotion) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Type Promotion (type-promotion) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Merge internal globals (global-merge) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Merge internal globals (global-merge) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Hardware Loop Insertion (hardware-loops) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Hardware Loop Insertion (hardware-loops) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Transform predicated vector loops to use MVE tail predication (mve-tail-predication) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

; Loop:
12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

; Exit blocks
26:                                               ; preds = %12
  ret i32 0
*** IR Dump After Transform predicated vector loops to use MVE tail predication (mve-tail-predication) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

; Loop:
12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

; Exit blocks
26:                                               ; preds = %12
  ret i32 0
*** IR Dump Before A No-Op Barrier Pass (barrier) ***
; ModuleID = 'mainARM.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armv4t-unknown-linux-gnueabi"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

declare i32 @printf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"min_enum_size", i32 4}
!2 = !{i32 1, !"branch-target-enforcement", i32 0}
!3 = !{i32 1, !"sign-return-address", i32 0}
!4 = !{i32 1, !"sign-return-address-all", i32 0}
!5 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"PIE Level", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
*** IR Dump After A No-Op Barrier Pass (barrier) ***
; ModuleID = 'mainARM.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armv4t-unknown-linux-gnueabi"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

declare i32 @printf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"min_enum_size", i32 4}
!2 = !{i32 1, !"branch-target-enforcement", i32 0}
!3 = !{i32 1, !"sign-return-address", i32 0}
!4 = !{i32 1, !"sign-return-address-all", i32 0}
!5 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"PIE Level", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}
# *** IR Dump Before ARM Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After ARM Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  %4:gpr = COPY $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  %7:gpr = COPY $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  %9:gpr = COPY $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
688B	  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  %19:gpr = COPY $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

944B	  %12:gpr = MOVi 0, 14, $noreg, $noreg
960B	  $r0 = COPY %12:gpr
976B	  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  %4:gpr = COPY $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  %7:gpr = COPY $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  %9:gpr = COPY $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
688B	  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  %19:gpr = COPY $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

944B	  %12:gpr = MOVi 0, 14, $noreg, $noreg
960B	  $r0 = COPY %12:gpr
976B	  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before ARM MVE TailPred and VPT Optimisation Pass (arm-mve-vpt-opts) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After ARM MVE TailPred and VPT Optimisation Pass (arm-mve-vpt-opts) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before ARM pre- register allocation load / store optimization pass (arm-prera-ldst-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After ARM pre- register allocation load / store optimization pass (arm-prera-ldst-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY %2:gpr
  $r1 = COPY %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %4:gpr = COPY $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:gpr = COPY $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %6:gpr
  $r1 = COPY %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %9:gpr = COPY $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %18:gpr
  $r1 = COPY %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %19:gpr = COPY $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY %12:gpr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY killed %2:gpr
  $r1 = COPY killed %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %4:gpr = COPY killed $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY killed %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %7:gpr = COPY killed $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed %6:gpr
  $r1 = COPY killed %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %9:gpr = COPY killed $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY killed %18:gpr
  $r1 = COPY killed %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %19:gpr = COPY killed $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY killed %12:gpr
  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY killed %2:gpr
  $r1 = COPY killed %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %4:gpr = COPY killed $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY killed %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %7:gpr = COPY killed $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed %6:gpr
  $r1 = COPY killed %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %9:gpr = COPY killed $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY killed %18:gpr
  $r1 = COPY killed %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %19:gpr = COPY killed $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY killed %12:gpr
  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY killed %2:gpr
  $r1 = COPY killed %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %4:gpr = COPY killed $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY killed %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %7:gpr = COPY killed $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed %6:gpr
  $r1 = COPY killed %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %9:gpr = COPY killed $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY killed %18:gpr
  $r1 = COPY killed %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %19:gpr = COPY killed $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY killed %12:gpr
  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY killed %2:gpr
  $r1 = COPY killed %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %4:gpr = COPY killed $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY killed %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %7:gpr = COPY killed $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed %6:gpr
  $r1 = COPY killed %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %9:gpr = COPY killed $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY killed %18:gpr
  $r1 = COPY killed %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %19:gpr = COPY killed $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY killed %12:gpr
  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY killed %2:gpr
  $r1 = COPY killed %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %4:gpr = COPY killed $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY killed %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %7:gpr = COPY killed $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed %6:gpr
  $r1 = COPY killed %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %9:gpr = COPY killed $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY killed %18:gpr
  $r1 = COPY killed %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %19:gpr = COPY killed $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY killed %12:gpr
  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = MOVi 0, 14, $noreg, $noreg
  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %1:gpr = MOVi 1, 14, $noreg, $noreg
  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
  $r0 = COPY killed %2:gpr
  $r1 = COPY killed %3:gpr
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %4:gpr = COPY killed $r0
  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %6:gpr
  $r1 = COPY killed %5:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %7:gpr = COPY killed $r0
  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed %6:gpr
  $r1 = COPY killed %8:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %9:gpr = COPY killed $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY killed %18:gpr
  $r1 = COPY killed %17:gpr
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  dead %19:gpr = COPY killed $r0
  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  %12:gpr = MOVi 0, 14, $noreg, $noreg
  $r0 = COPY killed %12:gpr
  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 killed %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 killed %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY killed %2:gpr
176B	  $r1 = COPY killed %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY killed %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY killed %6:gpr
416B	  $r1 = COPY killed %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
688B	  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY killed %18:gpr
768B	  $r1 = COPY killed %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

944B	  %12:gpr = MOVi 0, 14, $noreg, $noreg
960B	  $r0 = COPY killed %12:gpr
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 killed %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 killed %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY killed %2:gpr
176B	  $r1 = COPY killed %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY killed %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY killed %6:gpr
416B	  $r1 = COPY killed %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr killed %10:gpr, killed %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 killed %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr killed %14:gpr, killed %15:gpr, 14, $noreg, $noreg
688B	  STRi12 killed %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY killed %18:gpr
768B	  $r1 = COPY killed %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 killed %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri killed %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 killed %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

944B	  %12:gpr = MOVi 0, 14, $noreg, $noreg
960B	  $r0 = COPY killed %12:gpr
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

944B	  %12:gpr = MOVi 0, 14, $noreg, $noreg
960B	  $r0 = COPY %12:gpr
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

944B	  %12:gpr = MOVi 0, 14, $noreg, $noreg
960B	  $r0 = COPY %12:gpr
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY killed $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY killed $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY killed $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY killed $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  %0:gpr = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 %0:gpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 %0:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  %1:gpr = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 %1:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 %1:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:gpr = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  %3:gpr = ADDri %stack.5, 0, 14, $noreg, $noreg
160B	  $r0 = COPY %2:gpr
176B	  $r1 = COPY %3:gpr
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
224B	  dead %4:gpr = COPY $r0
240B	  %5:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  %6:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY %6:gpr
304B	  $r1 = COPY %5:gpr
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  dead %7:gpr = COPY $r0
368B	  %8:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY %6:gpr
416B	  $r1 = COPY %8:gpr
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
464B	  dead %9:gpr = COPY $r0
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  %10:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  %11:gpr = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr %10:gpr, %11:gpr, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 %13:gpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  %14:gpr = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  %15:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  %16:gpr = nsw ADDrr %14:gpr, %15:gpr, 14, $noreg, $noreg
688B	  STRi12 %16:gpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  %17:gpr = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  %18:gpr = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
752B	  $r0 = COPY %18:gpr
768B	  $r1 = COPY %17:gpr
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
816B	  dead %19:gpr = COPY $r0
832B	  %20:gpr = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 %20:gpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  %21:gpr = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  %22:gpr = nsw ADDri %21:gpr, 1, 14, $noreg, $noreg
896B	  STRi12 %22:gpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  renamable $r0 = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  renamable $r0 = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
240B	  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY renamable $r4
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
368B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY killed renamable $r4
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
688B	  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
832B	  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
896B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  renamable $r0 = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  renamable $r0 = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
240B	  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY renamable $r4
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
368B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY killed renamable $r4
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
688B	  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
832B	  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
896B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  renamable $r0 = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  renamable $r0 = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
240B	  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY renamable $r4
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
368B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY killed renamable $r4
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
688B	  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
832B	  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
896B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  renamable $r0 = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  renamable $r0 = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
240B	  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY renamable $r4
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
368B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY killed renamable $r4
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
688B	  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
832B	  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
896B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  renamable $r0 = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  renamable $r0 = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
240B	  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY renamable $r4
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
368B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY killed renamable $r4
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
688B	  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
832B	  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
896B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  renamable $r0 = MOVi 0, 14, $noreg, $noreg
32B	  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
64B	  renamable $r0 = MOVi 1, 14, $noreg, $noreg
80B	  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
96B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
112B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
144B	  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
192B	  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
208B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
240B	  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
256B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
272B	  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
288B	  $r0 = COPY renamable $r4
320B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
368B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
400B	  $r0 = COPY killed renamable $r4
432B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
480B	  B %bb.1

496B	bb.1 (%ir-block.12):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2, %bb.3

512B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
528B	  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
560B	  Bcc %bb.3, 10, killed $cpsr
576B	  B %bb.2

592B	bb.2 (%ir-block.16):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
624B	  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
640B	  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
656B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
672B	  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
688B	  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
704B	  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
720B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
736B	  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
784B	  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
800B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
832B	  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
848B	  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
864B	  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
880B	  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
896B	  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
912B	  B %bb.1

928B	bb.3 (%ir-block.26):
	; predecessors: %bb.1

960B	  $r0 = MOVi 0, 14, $noreg, $noreg
976B	  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ADDri %stack.5, 0, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  renamable $r0 = LDRi12 %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = COPY killed renamable $r4
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before ARM load / store optimization pass (arm-ldst-opt) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After ARM load / store optimization pass (arm-ldst-opt) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before ARM Execution Domain Fix (arm-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After ARM Execution Domain Fix (arm-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before ARM pseudo instruction expansion pass (arm-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After ARM pseudo instruction expansion pass (arm-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Thumb2 instruction size reduce pass (thumb2-reduce-size) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Thumb2 instruction size reduce pass (thumb2-reduce-size) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before If Converter (if-converter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After If Converter (if-converter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before PostRA Machine Instruction Scheduler (postmisched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After PostRA Machine Instruction Scheduler (postmisched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before MVE VPT block insertion pass (arm-mve-vpt) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After MVE VPT block insertion pass (arm-mve-vpt) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before ARM sls hardening pass (arm-sls-hardening) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After ARM sls hardening pass (arm-sls-hardening) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Thumb2 instruction size reduce pass (thumb2-reduce-size) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Thumb2 instruction size reduce pass (thumb2-reduce-size) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before ARM block placement (arm-block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After ARM block placement (arm-block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

*** IR Dump Before Machine Outliner (machine-outliner) ***
; ModuleID = 'mainARM.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armv4t-unknown-linux-gnueabi"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

declare i32 @printf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"min_enum_size", i32 4}
!2 = !{i32 1, !"branch-target-enforcement", i32 0}
!3 = !{i32 1, !"sign-return-address", i32 0}
!4 = !{i32 1, !"sign-return-address-all", i32 0}
!5 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"PIE Level", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Machine Outliner (machine-outliner) ***
; ModuleID = 'mainARM.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armv4t-unknown-linux-gnueabi"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %10)
  br label %12

12:                                               ; preds = %16, %0
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  store i32 %17, i32* %5, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 noundef %21)
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %12, !llvm.loop !10

26:                                               ; preds = %12
  ret i32 0
}

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

declare i32 @printf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="arm7tdmi" "target-features"="+armv4t,+soft-float,+strict-align,-aes,-bf16,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16,-fp16fml,-fp64,-fpregs,-fullfp16,-mve,-mve.fp,-neon,-sha2,-thumb-mode,-vfp2,-vfp2sp,-vfp3,-vfp3d16,-vfp3d16sp,-vfp3sp,-vfp4,-vfp4d16,-vfp4d16sp,-vfp4sp" "use-soft-float"="true" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"min_enum_size", i32 4}
!2 = !{i32 1, !"branch-target-enforcement", i32 0}
!3 = !{i32 1, !"sign-return-address", i32 0}
!4 = !{i32 1, !"sign-return-address-all", i32 0}
!5 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!6 = !{i32 7, !"PIC Level", i32 2}
!7 = !{i32 7, !"PIE Level", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
# *** IR Dump Before ARM Branch Targets (arm-branch-targets) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After ARM Branch Targets (arm-branch-targets) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump Before ARM constant island placement and branch shortening pass (arm-cp-islands) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

# End machine code for function main.

# *** IR Dump After ARM constant island placement and branch shortening pass (arm-cp-islands) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

bb.4 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function main.

# *** IR Dump Before ARM Low Overhead Loops pass (arm-low-overhead-loops) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

bb.4 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function main.

# *** IR Dump After ARM Low Overhead Loops pass (arm-low-overhead-loops) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
  fi#8: size=4, align=4, at location [SP-12]
  fi#9: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @.str.1, align=4

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -12, 14, $noreg :: (store (s32) into %ir.1)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVr $sp, 14, $noreg, $noreg
  BL @__isoc99_scanf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r4 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = MOVr $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  $r0 = MOVr killed $r4, 14, $noreg, $noreg
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  B %bb.1

bb.1 (%ir-block.12):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr
  Bcc %bb.3, 10, killed $cpsr
  B %bb.2

bb.2 (%ir-block.16):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  STRi12 killed renamable $r0, $sp, 4, 14, $noreg :: (store (s32) into %ir.5)
  renamable $r0 = LDRi12 $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 12, 14, $noreg :: (store (s32) into %ir.3)
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  BL @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg :: (store (s32) into %ir.2)
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg :: (store (s32) into %ir.4)
  B %bb.1

bb.3 (%ir-block.26):
; predecessors: %bb.1

  $r0 = MOVi 0, 14, $noreg, $noreg
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr
  BX_RET 14, $noreg, implicit $r0

bb.4 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function main.

